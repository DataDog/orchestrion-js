exports[`test the wasm 1`] = `
"import { tracingChannel as tr_ch_apm_tracingChannel } from \\"diagnostics_channel\\";\\nconst tr_ch_apm$up:fetch = tr_ch_apm_tracingChannel(\\"orchestrion:one:up:fetch\\");\\nconst tr_ch_apm$up:constructor = tr_ch_apm_tracingChannel(\\"orchestrion:one:up:constructor\\");\\nexport class Up {\\n    constructor(){\\n        const tr_ch_apm_ctx$up:constructor = {\\n            arguments\\n        };\\n        try {\\n            if (tr_ch_apm$up:constructor.hasSubscribers) {\\n                tr_ch_apm$up:constructor.start.publish(tr_ch_apm_ctx$up:constructor);\\n            }\\n            console.log('constructor');\\n        } catch (tr_ch_err) {\\n            if (tr_ch_apm$up:constructor.hasSubscribers) {\\n                tr_ch_apm_ctx$up:constructor.error = tr_ch_err;\\n                try {\\n                    tr_ch_apm_ctx$up:constructor.self = this;\\n                } catch (refErr) {}\\n                tr_ch_apm$up:constructor.error.publish(tr_ch_apm_ctx$up:constructor);\\n            }\\n            throw tr_ch_err;\\n        } finally{\\n            if (tr_ch_apm$up:constructor.hasSubscribers) {\\n                tr_ch_apm_ctx$up:constructor.self = this;\\n                tr_ch_apm$up:constructor.end.publish(tr_ch_apm_ctx$up:constructor);\\n            }\\n        }\\n    }\\n    fetch() {\\n        const traced = ()=>{\\n            console.log('fetch');\\n        };\\n        if (!tr_ch_apm$up:fetch.hasSubscribers) return traced();\\n        return tr_ch_apm$up:fetch.traceSync(traced, {\\n            arguments,\\n            self: this\\n        });\\n    }\\n}\\n"
`;
